using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using Roys.Generic;
using System.Data.SqlClient;
using Roys.Connect;
using Roys.Generic.SQL;


namespace PickGeneration
{
    public partial class FrmMain : FrmGenericLayout
    {
        #region fields
        private int count = 0;
        
        private List<string> listDepts = new List<string> { };
        private List<string> listAtts = new List<string> { };
        private List<string> listSupply = new List<string> { };
        private List<string> listStores = new List<string> { };

        private List<string> listDuplicates = new List<string> { };


        private DataTable dtStoreDeptGroup = new DataTable();

        private DataTable dtAutoGenerated = new DataTable();
        private DataTable dtStoredManualPick = new DataTable();

        private DataTable dtManualPick;

        private UserDetails userdetails;

        #endregion

        #region methods
        public FrmMain()
        {
            InitializeComponent();
        }

        private void GetStores()
        {
            string query = @"SELECT loc_code + ' - ' + loc_name as location                               
                            FROM RoyRetailDB.dbo.tblLocations locs (nolock)                             
                            WHERE LocationAreaID in (1,2,3)
                            AND active = 1
                            ORDER BY loc_code ";

            DataTable dtStores = null;

            try
            {
                dtStores = SqlMethods.RunSqlQuery(Connections.SQLConnString_HO_RoyRetail, query);
            }
            catch (SqlException sqlxn)
            {                
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "GetStores - Error getting store names for comboBox");
                MessageBox.Show("GetStores - Error getting store names for comboBox: " + sqlxn.Message, "PickGeneration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            if (dtStores.Rows.Count > 0)
            {
                foreach (DataRow row in dtStores.Rows)
                {
                    comboBoxStoreSelect.Items.Add(row["location"].ToString());
                }
            }

        }  //Gets stores for combobox
        private void GetPickTypes()
        {
            string query = @"SELECT cast(pick_type_id as varchar) + ' - ' + pick_type_description as pick_type                               
                            FROM RoyRetailDB.dbo.tblPicklist_Types type (nolock)                             
                            WHERE pick_system = 'WH'                            
                            ORDER BY pick_type_id ";

            DataTable dtTypes = null;

            try
            {
                dtTypes = SqlMethods.RunSqlQuery(Connections.SQLConnString_HO_RoyRetail, query);
            }
            catch (SqlException sqlxn)
            {
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "GetPickTypes - Error getting pick types for comboBox");
                MessageBox.Show("GetPickTypes - Error getting pick types for comboBox: " + sqlxn.Message, "PickGeneration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            if (dtTypes.Rows.Count > 0)
            {
                foreach (DataRow row in dtTypes.Rows)
                {
                    comboBoxPickType.Items.Add(row["pick_type"].ToString());
                }
            }
        }
        private void GetUnitSize()
        {
            string query = @"SELECT i_prod_code, i_promo, i_wh_unit                               
                            FROM Streetwise_Live.dbo.prods pr (nolock)                             
                            WHERE i_prod_code = @prod_code
                            AND i_promo = @promo ";

            List<SqlParameter> parameters = new List<SqlParameter>()
            {
                new SqlParameter("@prod_code", SqlDbType.Char, 16) {Value = productSelection1.FoundProduct.ProductCode},
                new SqlParameter("@promo", SqlDbType.Char, 1) {Value = productSelection1.FoundProduct.ProductVar},
                
            };

            DataTable dtWhUnit = null;

            try
            {
                dtWhUnit = SqlMethods.RunSqlQuery(Connections.SQLConnString_HO_RoyRetail, query, parameters);
            }
            catch (SqlException sqlxn)
            {
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "GetUnitSize - Error getting unit size for manual pick display");
                MessageBox.Show("GetUnitSize - Error getting unit size for manual pick display: " + sqlxn.Message, "PickGeneration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            if (dtWhUnit.Rows.Count > 0)
            {               
                foreach (DataRow row in dtWhUnit.Rows)
                {
                    lblUnitSizeResult.Text = row["i_wh_unit"].ToString();
                }
            }

           

            

        } //gets unit size of product

        private bool IsDuplicate(String identifier)
        {
            foreach (var x in listDuplicates)
            {
                if (x == identifier)
                {
                    return true;
                }
            }

            return false;
        }  //checks if manually added product is duplicate


        private void AddToRequirements()
        {
            
            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn)
            {                
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when adding to Picklist_Requirements");
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");
                return;

            }


            string pickRequirementCommand = "INSERT INTO RoyRetailDB.dbo.tblPicklist_Requirement (pick_type_id, prod_code, prod_var, loc_from, loc_from_stock_area_group, loc_from_stock_area, loc_to, pick_qty, date_time_added) " +
                                             "VALUES (@pick_type_id, @prod_code, @prod_var, @loc_from, @loc_from_stock_area_group, @loc_from_stock_area, @loc_to, @pick_qty, @date_time_added) ";

            DateTime now = DateTime.Now;

            if (dtAutoGenerated.Rows.Count > 0)
            {
                foreach (DataRow row in dtAutoGenerated.Rows)
                {
                    foreach (var s in listStores)
                    {
                        if (Convert.ToInt32(row["i_loc_code"]) == Convert.ToInt32(s))
                        {

                            using (SqlCommand command = new SqlCommand(pickRequirementCommand, objConnection))
                            {


                                double a = 0;

                                double x = 0;
                                double y = 0;
                                double z = 0;

                                x = Convert.ToDouble(row["br_loc_max_lev"]);
                                y = Convert.ToDouble(row["i_stk_bal"]);
                                z = Convert.ToDouble(row["i_wh_unit"]);

                                double q = 0;
                                q = (x - y) / z;
                                a = Math.Ceiling(q);
                                a = a * z;
                                int quantity = Convert.ToInt32(a);

                                command.Parameters.AddWithValue("@pick_type_id", Convert.ToInt32(comboBoxPickType.SelectedItem.ToString().Substring(0,2)));
                                command.Parameters.AddWithValue("@prod_code", row["i_prod_code"]);
                                command.Parameters.AddWithValue("@prod_var", row["i_promo"]);
                                command.Parameters.AddWithValue("@loc_from", 184);
                                command.Parameters.AddWithValue("@loc_from_stock_area_group", row["m_bin_zone"]);
                                command.Parameters.AddWithValue("@loc_from_stock_area", row["m_bin"]);
                                command.Parameters.AddWithValue("@loc_to", s);
                                command.Parameters.AddWithValue("@pick_qty", quantity);
                                command.Parameters.AddWithValue("@date_time_added", now);                                
                                command.ExecuteNonQuery();
                            }
                        }

                    }
                }
            }


            if (dtStoredManualPick.Rows.Count > 0)
            {
                foreach (DataRow row in dtStoredManualPick.Rows)
                {
                    using (SqlCommand command = new SqlCommand(pickRequirementCommand, objConnection))
                    {                        
                        command.Parameters.AddWithValue("@pick_type_id", Convert.ToInt32(comboBoxPickType.SelectedItem.ToString().Substring(0,2)));
                        command.Parameters.AddWithValue("@prod_code", row["i_prod_code"]);
                        command.Parameters.AddWithValue("@prod_var", row["i_promo"]);
                        command.Parameters.AddWithValue("@loc_from", 184);
                        command.Parameters.AddWithValue("@loc_from_stock_area_group", row["m_bin_zone"]);
                        command.Parameters.AddWithValue("@loc_from_stock_area", row["m_bin"]);
                        command.Parameters.AddWithValue("@loc_to", row["Location_To"]);
                        command.Parameters.AddWithValue("@pick_qty", row["Quantity"]);
                        command.Parameters.AddWithValue("@date_time_added", now);
                        Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Product Code: " + row["i_prod_code"] + " at loc: " + row["Location_To"] + " added to requirements");
                        command.ExecuteNonQuery();
                    }

                }
            }





            objConnection.Close();
        }  //adds items to pickListRequirements  
        private void Generate()
        {
            List<SqlParameter> parameters = new List<SqlParameter>()
            {
                new SqlParameter("@CreatedBy", SqlDbType.VarChar, 20) {Value = Environment.UserName }
            };

            using (var conn = new SqlConnection(Connections.SQLConnString_HO_RoyRetail))
            using (var command = new SqlCommand("RoyRetailDB.dbo.SP_Picks_GeneratePickFromRequirement", conn)
            {
                CommandType = CommandType.StoredProcedure
            })
            {
                conn.Open();
                command.Parameters.AddRange(parameters.ToArray());
                command.ExecuteNonQuery();
            }
           

            if (dtStoredManualPick.Rows.Count > 0)
            {
                foreach (DataRow r in dtStoredManualPick.Rows)
                {
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Product Code: " + r[0] + " at loc: " + r[7] + " Generated");
                }
            }

        }  //stored procedure splits pickListRequirements into picklistItems and picklistHeader
        private void AutoGeneratedPick()
        {


            string[] paramNamesDepts = listDepts.Select(                   //paramatises list of selected items
                (s, i) => "@dep" + i.ToString()
            ).ToArray();

            string[] paramNamesAtts = listAtts.Select(
                (s, i) => "@att" + i.ToString()
            ).ToArray();

            string[] paramStore = listStores.Select(
                (s, i) => "@store" + i.ToString()
            ).ToArray();

            string[] paramSupply = listSupply.Select(
                (s, i) => "@supplier" + i.ToString()
            ).ToArray();


            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn) 
            {                
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when running the AutoGenerated items view");
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");                
                return;
            }

            



            string commandText = "SELECT distinct br.i_loc_code, br.i_prod_code, br.i_dept, br.i_promo, bin.m_bin, bin.m_bin_zone, pr.p_supp_code, br_loc_min_lev, cast(br.i_stk_bal as int)+cast(br.i_on_order as int)+cast(br.i_brch_on_order as int)as i_stk_bal, i_wh_unit, pr.i_size, pr.i_prod_desc, br_loc_max_lev " +
                                            "FROM Streetwise_Live.dbo.brprod br " +
                                            "JOIN prods pr (nolock) on br.i_prod_code = pr.i_prod_code " +
                                            "AND br.i_promo = pr.i_promo " +
                                            "JOIN whprod wh (nolock) on br.i_prod_code = wh.i_prod_code " +
                                            "AND br.i_promo = wh.i_promo " +
                                            "JOIN Streetwise_Live.dbo.attprod ap (nolock) on br.i_prod_code = ap.i_prod_code " +
                                            "JOIN ( SELECT ROW_NUMBER() OVER (partition by i_loc_code, i_prod_code, i_promo " +
                                            "Order by m_bin_use asc, cast(i_stk_bal as int)desc) as rowId, " +
                                            "i_loc_code, i_prod_code, i_promo, m_bin, i_stk_bal, m_bin_use, m_bin_zone " +
                                            "FROM whstock (nolock) " +
                                            "WHERE i_loc_code = '184') bin " +
                                            "on br.i_prod_code = bin.i_prod_code " +
                                            "AND br.i_promo = bin.i_promo " +
                                            "AND bin.rowId = 1 " +
                                            "left Join( " +
                                            "Select prod_code, prod_var,RecipientLocation, sum(QuantitySent) QuantitySent " +
                                            "FROM RoyRetailDB.dbo.tblTransferItems titems (nolock) " +
                                            "join RoyRetailDB.dbo.tblTransferHeader th (nolock) on titems.TransferID = th.TransferID " +
                                            "where TransferStatusID = 5 And TransferTypeID In (7,8) " +
                                            "group by prod_code, prod_var,RecipientLocation " +
                                            ")trans " +
                                            "on br.i_prod_code = trans.prod_code " +
                                            "and br.i_promo = trans.prod_var " +
                                            "and br.i_loc_code = trans.RecipientLocation " +
                                            "left join( " +
                                            "Select prod_code, prod_var, pickI.loc_to, sum(pickI.qty_to_pick) QtyToPick " +
                                            "From RoyRetailDB.dbo.tblPicklist_Items pickI (nolock) " +
                                            "join RoyRetailDB.dbo.tblPicklist_Header ph (nolock) on pickI.picklist_id = ph.picklist_id " +
                                            "where pick_status_id = 1 " +
                                            "group by prod_code, prod_var, loc_to " +
                                            ")pickList " +
                                            "on br.i_prod_code = pickList.prod_code " +
                                            "and br.i_promo = pickList.prod_var " +
                                            "and br.i_loc_code = pickList.loc_to " +
                                            "Where br.i_loc_code in ({2}) " +
                                            "AND br.i_rep_meth = 7 " +
                                            "AND (cast (br.i_stk_bal as int) + cast(br.i_on_order as int) + cast(i_brch_on_order as int) + IsNull(trans.QuantitySent, 0) + ISNULL(pickList.QtyToPick,0)) < cast(br_loc_min_lev as int) " +
                                            "AND br.i_rep_source = '184' " +
                                            "AND pr.i_stk_status not in (2,3, '') " +
                                            "AND wh.i_loc_code = '184' " +
                                            "AND cast(wh.i_stk_bal as int) > 0  " +
                                            ((listAtts.Count > 0) ? "AND ap.i_att_cat in ({1}) " : string.Empty) +
                                            ((listDepts.Count > 0) ? "AND br.i_dept in ({0}) " : string.Empty) +
                                            ((listSupply.Count > 0) ? "AND pr.p_supp_code in ({3}) " : string.Empty) +
                                            "ORDER BY br.i_loc_code, br.i_dept, pr.p_supp_code ";


            string inClause = string.Join(",", paramNamesDepts);
            string inClauseAtts = string.Join(",", paramNamesAtts);
            string inClauseStore = string.Join(",", paramStore);
            string inClauseSupplier = string.Join(",", paramSupply);


            using (var command = new SqlCommand(string.Format(commandText, inClause, inClauseAtts, inClauseStore, inClauseSupplier), objConnection))
            {

                
                

                for (int i = 0; i < paramNamesDepts.Length; i++)
                {
                    command.Parameters.AddWithValue(paramNamesDepts[i], listDepts[i]);
                }

                for (int i = 0; i < paramNamesAtts.Length; i++)
                {
                    command.Parameters.AddWithValue(paramNamesAtts[i], listAtts[i]);
                }

                for (int i = 0; i < paramStore.Length; i++)
                {
                    command.Parameters.AddWithValue(paramStore[i], listStores[i]);
                }

                for (int i = 0; i < paramSupply.Length; i++)
                {
                    command.Parameters.AddWithValue(paramSupply[i], listSupply[i]);
                }
                

                SqlDataAdapter da = new SqlDataAdapter(command);



                


                try
                {
                    da.Fill(dtAutoGenerated);
                }
                catch (SqlException sqlxn)
                {
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Error getting autogenerated products: " + sqlxn.Message);
                    MessageBox.Show("SQL Exception Error when getting the AutoGenerated products" + sqlxn.Message, "PickGeneration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);                    
                }
                finally
                {
                    objConnection.Close();
                }



                if (dtAutoGenerated.Rows.Count == 0)
                {
                    MessageBox.Show("No Products Found", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    
                }
                

                

            }

        } //gets all products that meet specific criteria
        private void ManualPick()
        {
            int Qty = Convert.ToInt32(Qtyselect.Value);
            string Var = productSelection1.FoundProduct.ProductVar;

            string query = @"SELECT distinct pr.i_prod_code, pr.i_dept, pr.i_promo, bin.m_bin, bin.m_bin_zone, pr.p_supp_code, @Qty as Quantity, @LocTo as Location_To, whp.i_stk_bal, pr.i_size, pr.i_prod_desc                                                                                        
                            From Streetwise_live.dbo.prods pr (nolock)
                            JOIN Streetwise_live.dbo.whprod whp (nolock) on pr.i_prod_code = whp.i_prod_code
                            AND pr.i_promo = whp.i_promo
                            JOIN (
	                        SELECT ROW_NUMBER() OVER (partition by i_loc_code, i_prod_code, i_promo 
	                        Order by m_bin_use asc, cast(i_stk_bal as int)desc) as rowId, 
	                        i_loc_code, i_prod_code, i_promo, m_bin, i_stk_bal, m_bin_use, m_bin_zone 
	                        FROM Streetwise_live.dbo.whstock (nolock)
	                        WHERE i_loc_code = '184'
                            ) bin 
                            on pr.i_prod_code = bin.i_prod_code
                            AND pr.i_promo = bin.i_promo
                            AND bin.rowId = 1
                            Where whp.i_loc_code = '184'                            
                            AND pr.i_prod_code = @prod_code
                            AND pr.i_promo = @prod_var                                
                            ORDER BY pr.i_dept, pr.p_supp_code ";



            List<SqlParameter> parameters = new List<SqlParameter>()
            {
                new SqlParameter("@prod_code", SqlDbType.Char, 16) {Value = productSelection1.FoundProduct.ProductCode},
                new SqlParameter("@prod_var", SqlDbType.Char, 1) {Value = productSelection1.FoundProduct.ProductVar},
                new SqlParameter("@Qty", SqlDbType.Int){Value = Qty},
                new SqlParameter("@LocTo", SqlDbType.VarChar, 3){Value = comboBoxStoreSelect.SelectedItem.ToString().Substring(0,3)}
            };

             

            try
            {
                dtManualPick = SqlMethods.RunSqlQuery(Connections.SQLConnString_HO_RoyRetail, query, parameters);
            }

            catch (SqlException sqlxn)
            {               
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when getting the ManualPick item");                
                MessageBox.Show("SQL Exception Error when getting the ManualPick item" + sqlxn.Message, "PickGeneration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            if (dtManualPick.Rows.Count > 0)
            {
                
                
                foreach (DataRow row in dtManualPick.Rows)
                {
                    if (Convert.ToInt32(row["i_stk_bal"]) != 0)
                    {
                        if (Convert.ToInt32(row["i_stk_bal"]) >= Qty)
                        {
                            int selectedStore = Convert.ToInt32(comboBoxStoreSelect.SelectedItem.ToString().Substring(0, 3));
                            var identifier = $"{productSelection1.FoundProduct.ProductCode}, {Var}, {selectedStore}";

                            if (IsDuplicate(identifier))
                            {
                                
                                MessageBox.Show("Product Code / Var / Location combination already entered","Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            }

                            else
                            {
                                if (dtStoredManualPick.Rows.Count > 0)
                                {
                                    DataRow manualPickRow = dtStoredManualPick.Select(string.Format("i_prod_code = '{0}' and i_promo = '{1}'", productSelection1.FoundProduct.ProductCode, Var)).FirstOrDefault();

                                    if (manualPickRow == null)
                                    {
                                        manualPickRow = dtManualPick.Select().FirstOrDefault();
                                    }


                                    if (Convert.ToInt32(manualPickRow[8]) >= Qty)  // r[8] = stock balance
                                    {
                                        if (Convert.ToInt32(manualPickRow[8]) >= Qty)
                                        {
                                            dtStoredManualPick.Merge(dtManualPick);
                                            listDuplicates.Add(identifier);

                                            var rowCount = dtStoredManualPick.Rows.Count;
                                            for (int i = 0; i < rowCount; i++)
                                            {
                                                var r = dtStoredManualPick.Rows[i];

                                                if (r[0].ToString().Trim() == productSelection1.FoundProduct.ProductCode)
                                                {
                                                    if (Convert.ToInt32(r[8]) > 0)
                                                    {


                                                        
                                                        MessageBox.Show("Product Added", "Pick Update", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        r[8] = Convert.ToInt32(r[8]) - Qty;
                                                        break;

                                                    }

                                                }


                                            }
                                        }


                                    }



                                    else
                                    {
                                        if (Convert.ToInt32(manualPickRow[8]) == 0)
                                        {
                                            
                                            MessageBox.Show("Stock Balance is 0", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                        else
                                        {                                            
                                            MessageBox.Show("Qty Is Too Much - Please Change To: " + Convert.ToInt32(manualPickRow[8]), "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }

                                    }



                                }

                                if (dtStoredManualPick.Rows.Count == 0)
                                {
                                    dtStoredManualPick.Merge(dtManualPick);
                                    DataRow manualPickRow = dtStoredManualPick.Select(string.Format("i_prod_code = '{0}' and i_promo = '{1}'", productSelection1.FoundProduct.ProductCode, productSelection1.FoundProduct.ProductVar)).FirstOrDefault();
                                    listDuplicates.Add(identifier);                                    
                                    MessageBox.Show("Product Added", "Pick Update", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    manualPickRow[8] = Convert.ToInt32(manualPickRow[8]) - Qty;
                                }



                            }
                        }

                        else
                        {                            
                            MessageBox.Show("Qty Is Too Much - Please Change To: " + Convert.ToInt32(row["i_stk_bal"]), "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        
                    }


                    else
                    {                        
                        MessageBox.Show("Stock Balance is 0", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }


                }
            }

            else
            {                
                MessageBox.Show("Product Not Currently In Warehouse", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }       //gets one product by user request
        private void VisualDisplay()
        {
            if (dtAutoGenerated.Rows.Count > 0) //adding auto generated picks to display table
            {
                foreach (DataRow row in dtAutoGenerated.Rows)
                {

                    double a = 0;
                    double x = 0;
                    double y = 0;
                    double z = 0;

                    x = Convert.ToDouble(row["br_loc_max_lev"]);
                    y = Convert.ToDouble(row["i_stk_bal"]);
                    z = Convert.ToDouble(row["i_wh_unit"]);

                    

                    double q = 0;
                    q = (x - y) / z;
                    a = Math.Ceiling(q);
                    a = a * z;
                    int quantity = Convert.ToInt32(a); //works out quantity needed 


                    DataGridViewRow r = (DataGridViewRow)dgvSelectedProds.Rows[0].Clone();
                    r.Cells[0].Value = row["i_loc_code"];     // location
                    r.Cells[1].Value = row[1];               // prod code
                    r.Cells[2].Value = row[3];              // var
                    r.Cells[3].Value = row[11];            // description
                    r.Cells[4].Value = row[10];           // size
                    r.Cells[5].Value = row[2];           // dept
                    r.Cells[6].Value = row[6];          // supplier
                    r.Cells[7].Value = quantity;       // qty
                    dgvSelectedProds.Rows.Add(r);
                    count++;
                }



                List<DataRow> grouped = dtAutoGenerated.AsEnumerable()
                      .GroupBy(r => new { Col1 = r["i_loc_code"], Col2 = r["i_dept"] })
                      .Select(g => g.OrderBy(r => r["i_loc_code"]).First())
                      .ToList();





                foreach (DataRow row in grouped)
                {
                    dtStoreDeptGroup.ImportRow(row);
                }
            }




            if (dtStoredManualPick.Rows.Count > 0)  //adding manual picks to display table
            {
                foreach (DataRow row in dtStoredManualPick.Rows)
                {
                    DataGridViewRow r = (DataGridViewRow)dgvSelectedProds.Rows[0].Clone();
                    r.Cells[0].Value = row[7];        //location
                    r.Cells[1].Value = row[0];       // prod code
                    r.Cells[2].Value = row[2];      // var
                    r.Cells[3].Value = row[10];    // description
                    r.Cells[4].Value = row[9];    // size
                    r.Cells[5].Value = row[1];   // dept
                    r.Cells[6].Value = row[5];  // supplier
                    r.Cells[7].Value = row[6]; // qty
                    dgvSelectedProds.Rows.Add(r);
                    count++;
                }

                List<DataRow> grouped = dtStoredManualPick.AsEnumerable()
                      .GroupBy(r => new { Col1 = r["Location_To"], Col2 = r["i_dept"] })
                      .Select(g => g.OrderBy(r => r["Location_To"]).First())
                      .ToList();
                

                            

                foreach (DataRow row in grouped)
                {
                    dtStoreDeptGroup.ImportRow(row);
                }
            }

              //dtStoreDeptGroup =(DataTable)dgvSelectedProds.Rows.AsEnumerable()
              //        .GroupBy(r => new { Col1 = r["i_loc_code"], Col2 = r["i_dept"] })
              //        .Select(g => g.OrderBy(r => r["i_loc_code"]).First())
              //        .CopyToDataTable();


            
            lblProductsDisplayed.Text = count + " Product(s) Displayed";
            //lblOrderCount.Text = picks + " Picks";
            lblOrderCount.Text = dtStoreDeptGroup.Rows.Count + " Picks";
        }  //displays products in table + determines no. of picks
        private void ClearLists()
        {
            listDepts.Clear();
            listAtts.Clear();
            listStores.Clear();
            listSupply.Clear();


            listBoxAtts.Items.Clear();
            listBoxDept.Items.Clear();
            listBoxStore.Items.Clear();
            listBoxSupplier.Items.Clear();

        }

        #region Lookups
        private void LookUpStore()
        {
            string[] paramStore = listStores.Select(
               (s, i) => "@loc" + i.ToString()
           ).ToArray();

            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn)
            {
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when getting store names");

            }


            string query = @"SELECT loc_code + ' - ' + loc_name as location                               
                            FROM RoyRetailDB.dbo.tblLocations locs (nolock)                             
                            WHERE LocationAreaID in (1,2,3)
                            AND loc_code in ({0})
                            ORDER BY loc_code ";

            string inClauseStore = string.Join(",", paramStore);

            using (var command = new SqlCommand(string.Format(query, inClauseStore), objConnection))
            {

                for (int i = 0; i < paramStore.Length; i++)
                {
                    command.Parameters.AddWithValue(paramStore[i], listStores[i]);
                }


                DataTable dt = new DataTable();

                SqlDataAdapter da = new SqlDataAdapter(command);

                try
                {
                    da.Fill(dt);
                }
                catch (SqlException sqlexn)
                {
                    MessageBox.Show(sqlexn.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Error looking up store: " + sqlexn.Message);
                }
                finally
                {
                    objConnection.Close();
                }

                if (listBoxStore.Items.Count > 0)
                {
                    listBoxStore.Items.Clear();
                }

                foreach (DataRow row in dt.Rows)
                {
                    listBoxStore.Items.Add(row["location"].ToString() + '\n');
                }


            }



        } //gets code and name of stores
        private void LookUpDept()
        {
            string[] paramDept = listDepts.Select(
               (s, i) => "@dept" + i.ToString()
           ).ToArray();

            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn)
            {
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when getting department names");
            }


            string query = @"SELECT i_dept + ' - ' + i_dept_desc as department                               
                            FROM Streetwise_Live.dbo.dept depts (nolock)                                                         
                            WHERE i_dept in ({0})
                            ORDER BY i_dept ";

            string inClauseDept = string.Join(",", paramDept);

            using (var command = new SqlCommand(string.Format(query, inClauseDept), objConnection))
            {

                for (int i = 0; i < paramDept.Length; i++)
                {
                    command.Parameters.AddWithValue(paramDept[i], listDepts[i]);
                }


                DataTable dt = new DataTable();

                SqlDataAdapter da = new SqlDataAdapter(command);

                try
                {
                    da.Fill(dt);
                }
                catch (SqlException sqlexn)
                {
                    MessageBox.Show(sqlexn.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Error looking up department: " + sqlexn.Message);
                }
                finally
                {
                    objConnection.Close();
                }

                if (listBoxDept.Items.Count > 0)
                {
                    listBoxDept.Items.Clear();
                }

                foreach (DataRow row in dt.Rows)
                {
                    listBoxDept.Items.Add(row["department"].ToString() + '\n');
                }


            }
        } // code and name of department 
        private void LookUpAtts()
        {
            string[] paramAtts = listAtts.Select(
               (s, i) => "@atts" + i.ToString()
           ).ToArray();

            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn)
            {
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when getting attribute descriptions");
            }


            string query = @"SELECT i_att_cat + ' - ' + i_att_cat_desc as attributes                               
                            FROM Streetwise_Live.dbo.attcat att (nolock)                                                         
                            WHERE i_att_cat in ({0})
                            ORDER BY i_att_cat ";

            string inClauseAtts = string.Join(",", paramAtts);

            using (var command = new SqlCommand(string.Format(query, inClauseAtts), objConnection))
            {

                for (int i = 0; i < paramAtts.Length; i++)
                {
                    command.Parameters.AddWithValue(paramAtts[i], listAtts[i]);
                }


                DataTable dt = new DataTable();

                SqlDataAdapter da = new SqlDataAdapter(command);

                try
                {
                    da.Fill(dt);
                }
                catch (SqlException sqlexn)
                {
                    MessageBox.Show(sqlexn.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Error looking up attribute: " + sqlexn.Message);
                }
                finally
                {
                    objConnection.Close();
                }

                if (listBoxAtts.Items.Count > 0)
                {
                    listBoxAtts.Items.Clear();
                }

                foreach (DataRow row in dt.Rows)
                {
                    listBoxAtts.Items.Add(row["attributes"].ToString() + '\n');
                }
            }
        } // code and name of atts 
        private void LookUpSupp()
        {
            string[] paramSupp = listSupply.Select(
               (s, i) => "@supp" + i.ToString()
           ).ToArray();

            SqlConnection objConnection = new SqlConnection(Connections.SQLConnString_HO_Streetwise_Live + "Application Name=PickGeneration");
            try
            {
                objConnection.Open();
            }
            catch (SqlException exn)
            {
                MessageBox.Show("Message: " + exn.Message + "\tLine: " + exn.LineNumber + "\tSource: " + exn.Source, "SQL Exception Error");
                Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Exception Error when getting supplier names");
            }


            string query = @"SELECT p_supp_code + ' - ' + p_supp_name as supplier                               
                            FROM Streetwise_Live.dbo.supps supp (nolock)                                                         
                            WHERE p_supp_code in ({0})
                            ORDER BY p_supp_code ";

            string inClauseSupp = string.Join(",", paramSupp);

            using (var command = new SqlCommand(string.Format(query, inClauseSupp), objConnection))
            {

                for (int i = 0; i < paramSupp.Length; i++)
                {
                    command.Parameters.AddWithValue(paramSupp[i], listSupply[i]);
                }


                DataTable dt = new DataTable();

                SqlDataAdapter da = new SqlDataAdapter(command);

                try
                {
                    da.Fill(dt);
                }
                catch (SqlException sqlexn)
                {
                    MessageBox.Show(sqlexn.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    Logging.AddLogToRoyRetailEvents(Logging.LogType.ERROR, "RA0510", "SQL Error looking up supplier: " + sqlexn.Message);
                }
                finally
                {
                    objConnection.Close();
                }

                if (listBoxSupplier.Items.Count > 0)
                {
                    listBoxSupplier.Items.Clear();
                }

                foreach (DataRow row in dt.Rows)
                {
                    listBoxSupplier.Items.Add(row["supplier"].ToString() + '\n');
                }
            }
        }  // code and name of supplier 



        #endregion

        #endregion

        #region buttons
        private void btnGenerate_Click(object sender, EventArgs e)
        {

            DialogResult result = MessageBox.Show("Are you sure you want to generate "+dtStoreDeptGroup.Rows.Count + " picks?", "Are You Sure?", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                

                AddToRequirements();
                Generate();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "---------- PICK GENERATED ---------- ");

                dtAutoGenerated.Clear();

                dtStoredManualPick.Clear();
                dtStoreDeptGroup.Clear();

                count = 0;                
                lblProductsDisplayed.Text = "0 Product(s) Displayed";
                lblOrderCount.Text = "- Picks";
                lblUnitSizeResult.Text = "-";

                listStores.Clear();
                listSupply.Clear();
                listDepts.Clear();
                listAtts.Clear();
                listDuplicates.Clear();

                dgvSelectedProds.Rows.Clear();
                listBoxAtts.Items.Clear();
                listBoxDept.Items.Clear();
                listBoxStore.Items.Clear();
                listBoxSupplier.Items.Clear();
                
                
            }

        } // generates the whole pick
        private void btnView_Click(object sender, EventArgs e)
        {
            dtAutoGenerated.Clear();
            dgvSelectedProds.Rows.Clear();

            count = 0;
            dtStoreDeptGroup.Clear();

            if (listStores.Count > 0)
            {
                AutoGeneratedPick();
                VisualDisplay();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "AutoGenerated products showing successfully");
            }

            else
            {
                

                if (productSelection1.EnteredProductCode != "")
                {                    
                    VisualDisplay();
                }

                else
                {
                    MessageBox.Show("Enter A Store", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }



        } // adds products from auto generated picks to display table
        private void btnProductAddView_Click(object sender, EventArgs e)
        {
            if (productSelection1.FoundProduct!=null)
            {
                dgvSelectedProds.Rows.Clear();

                count = 0;
                dtStoreDeptGroup.Clear();
                
                if (productSelection1.EnteredProductCode != "" || productSelection1.EnteredProductVar != "" || productSelection1.EnteredBarcode != "" || productSelection1.EnteredSupplierProductCode != "")
                {

                    if (comboBoxStoreSelect.SelectedItem != null)
                    {
                        ManualPick();
                        VisualDisplay();
                        Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Product code: " + productSelection1.FoundProduct.ProductCode + " at location: " + comboBoxStoreSelect.SelectedItem + " added successfully");
                        productSelection1.Focus();
                        productSelection1.Select();

                        //tbProdCode.Focus();
                        //tbProdCode.SelectAll();
                    }
                    else
                    {
                        VisualDisplay();
                        MessageBox.Show("Please Enter A Store", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //tbProdCode.Focus();
                        //tbProdCode.SelectAll();
                        productSelection1.Focus();
                        productSelection1.Select();
                    }

                }

                else
                {
                    VisualDisplay();
                    MessageBox.Show("Please Enter A Product Code", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //tbProdCode.Focus();
                    //tbProdCode.SelectAll();
                    productSelection1.Focus();
                    productSelection1.Select();

                }
            }
            else
            {
                MessageBox.Show("Product Not Found", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }




        }   //adds manually selected products to display table
        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (dtStoredManualPick.Rows.Count > 0)
            {
                DataRow manualPickRow = dtStoredManualPick.Select(string.Format("i_prod_code = '{0}' and i_promo = '{1}'", productSelection1.FoundProduct.ProductCode, productSelection1.FoundProduct.ProductVar)).FirstOrDefault();
                if (manualPickRow == null)
                {
                    manualPickRow = dtManualPick.Select().FirstOrDefault();
                }

                manualPickRow[8] = Convert.ToInt32(manualPickRow[8]) + Convert.ToInt32(Qtyselect.Value);
                listDuplicates.RemoveAt(listDuplicates.Count - 1);

                count = 0;
                dtStoreDeptGroup.Clear();



                int i = dtStoredManualPick.Rows.Count - 1;
                DataRow DeleteDataRow = dtStoredManualPick.Rows[i];
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Product code: " + productSelection1.FoundProduct.ProductCode + " at loc: " + DeleteDataRow[7] + " deleted");
                DeleteDataRow.Delete();

                dgvSelectedProds.Rows.Clear();
                dtStoredManualPick.AcceptChanges();
                VisualDisplay();                
                MessageBox.Show("Product Removed", "Pick Update", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Product code: "+ productSelection1.FoundProduct.ProductCode + " deleted");
                productSelection1.Focus();
                productSelection1.Select();
            }
        }  //deletes last manually added product

        private void btnStoreSelect_Click(object sender, EventArgs e)
        {
            ClearLists();
            var locationForm = new frmLocationSelection();
            locationForm.ShowDialog(this);
            listBoxUpdates_Load(sender, e);
        }  //opens store selection menu
        private void btnDeptSelect_Click(object sender, EventArgs e)
        {
            ClearLists();
            var departmentForm = new frmDepartmentSelection();
            departmentForm.ShowDialog(this);
            listBoxUpdates_Load(sender, e);
        } //opens department selection menu
        private void btnAttSelect_Click(object sender, EventArgs e)
        {
            ClearLists();
            var attForm = new frmAttributeSelection();
            attForm.ShowDialog();
            listBoxUpdates_Load(sender, e);
        } //opens attribute selection menu
        private void btnSupplierSelect_Click(object sender, EventArgs e)
        {
            ClearLists();
            var supplierForm = new frmSupplierSelection();
            supplierForm.ShowDialog();
            listBoxUpdates_Load(sender, e);
        } //opens supplier selection menu
        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }  //Exits the Application
        #endregion

       

        #region events
        
        private void listBoxUpdates_Load(object sender, EventArgs e)
        {
            if (General.SelectedLocations != null)
            {
                listStores = General.SelectedLocations.Split(',').ToList();
                LookUpStore();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Locations " + General.SelectedLocations.Split(',') + " selected successfully");
            }


            if (General.SelectedDepartments != null)
            {
                listDepts = General.SelectedDepartments.Split(',').ToList();
                LookUpDept();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Departments " + General.SelectedDepartments.Split(',') + " selected successfully");
            }

            if (frmAttributeSelection.SelectedAttributes != null)
            {
                listAtts = frmAttributeSelection.SelectedAttributes.Split(',').ToList();
                LookUpAtts();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Attributes " + frmAttributeSelection.SelectedAttributes.Split(',') + " selected successfully");
            }

            if (General.SelectedSuppliers != null)
            {
                listSupply = General.SelectedSuppliers.Split(',').ToList();
                LookUpSupp();
                Logging.AddLogToRoyRetailEvents(Logging.LogType.LOG, "RA0510", "Suppliers " + General.SelectedSuppliers.Split(',') + " selected successfully");
            }
        }              //displays criteria in listboxes when chosen
        private void FrmMain_Load(object sender, EventArgs e)
        {
             
            

            // Populate comboboxes
            GetStores();
            GetPickTypes();

            comboBoxPickType.SelectedIndex = 0;
            

            // Remove tab
            tabControl1.TabPages.Remove(tabPage2);

            userdetails = new UserDetails(Environment.UserName);            
            lblStore.Text = userdetails.LocationName;
        
            
        } //loads combo boxes and deletes unused inherited form items when app loads
        
        private void VarSelect_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {                
                e.SuppressKeyPress = true;
                SelectNextControl(ActiveControl, true, true, true, true);
            }
        } //goes to next tab index when enter is pressed

        private void Qtyselect_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {
                e.SuppressKeyPress = true;
                SelectNextControl(ActiveControl, true, true, true, true);
            }
        }

        private void comboBoxStoreSelect_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {
                e.SuppressKeyPress = true;
                SelectNextControl(ActiveControl, true, true, true, true);

                
            }
        }                       

        private void productSelection1_ProductCodeFound(object sender, EventArgs e)
        {
            if (productSelection1.FoundProduct!=null)
            {
                GetUnitSize();
            }
            else
            {
                MessageBox.Show("Product Not Found", "Pick Generation Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
                       
        }  //runs unit size method when prod code is entered

        private void productSelection1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {
                e.SuppressKeyPress = true;
                SelectNextControl(ActiveControl, true, true, true, true);
            }
        }

        #endregion
        
    }
}
